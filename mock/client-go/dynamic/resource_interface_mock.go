// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/k8s.io/client-go/dynamic/client.go

// Package mock_dynamic is a generated GoMock package.
package mock_dynamic

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	. "k8s.io/client-go/dynamic"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetRateLimiter mocks base method
func (m *MockInterface) GetRateLimiter() flowcontrol.RateLimiter {
	ret := m.ctrl.Call(m, "GetRateLimiter")
	ret0, _ := ret[0].(flowcontrol.RateLimiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter
func (mr *MockInterfaceMockRecorder) GetRateLimiter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockInterface)(nil).GetRateLimiter))
}

// Resource mocks base method
func (m *MockInterface) Resource(resource *v1.APIResource, namespace string) ResourceInterface {
	ret := m.ctrl.Call(m, "Resource", resource, namespace)
	ret0, _ := ret[0].(ResourceInterface)
	return ret0
}

// Resource indicates an expected call of Resource
func (mr *MockInterfaceMockRecorder) Resource(resource, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockInterface)(nil).Resource), resource, namespace)
}

// ParameterCodec mocks base method
func (m *MockInterface) ParameterCodec(parameterCodec runtime.ParameterCodec) Interface {
	ret := m.ctrl.Call(m, "ParameterCodec", parameterCodec)
	ret0, _ := ret[0].(Interface)
	return ret0
}

// ParameterCodec indicates an expected call of ParameterCodec
func (mr *MockInterfaceMockRecorder) ParameterCodec(parameterCodec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParameterCodec", reflect.TypeOf((*MockInterface)(nil).ParameterCodec), parameterCodec)
}

// MockResourceInterface is a mock of ResourceInterface interface
type MockResourceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResourceInterfaceMockRecorder
}

// MockResourceInterfaceMockRecorder is the mock recorder for MockResourceInterface
type MockResourceInterfaceMockRecorder struct {
	mock *MockResourceInterface
}

// NewMockResourceInterface creates a new mock instance
func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {
	mock := &MockResourceInterface{ctrl: ctrl}
	mock.recorder = &MockResourceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockResourceInterface) List(opts v1.ListOptions) (runtime.Object, error) {
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockResourceInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceInterface)(nil).List), opts)
}

// Get mocks base method
func (m *MockResourceInterface) Get(name string, opts v1.GetOptions) (*unstructured.Unstructured, error) {
	ret := m.ctrl.Call(m, "Get", name, opts)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockResourceInterfaceMockRecorder) Get(name, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceInterface)(nil).Get), name, opts)
}

// Delete mocks base method
func (m *MockResourceInterface) Delete(name string, opts *v1.DeleteOptions) error {
	ret := m.ctrl.Call(m, "Delete", name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockResourceInterfaceMockRecorder) Delete(name, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceInterface)(nil).Delete), name, opts)
}

// DeleteCollection mocks base method
func (m *MockResourceInterface) DeleteCollection(deleteOptions *v1.DeleteOptions, listOptions v1.ListOptions) error {
	ret := m.ctrl.Call(m, "DeleteCollection", deleteOptions, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(deleteOptions, listOptions interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockResourceInterface)(nil).DeleteCollection), deleteOptions, listOptions)
}

// Create mocks base method
func (m *MockResourceInterface) Create(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {
	ret := m.ctrl.Call(m, "Create", obj)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockResourceInterfaceMockRecorder) Create(obj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceInterface)(nil).Create), obj)
}

// Update mocks base method
func (m *MockResourceInterface) Update(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {
	ret := m.ctrl.Call(m, "Update", obj)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockResourceInterfaceMockRecorder) Update(obj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceInterface)(nil).Update), obj)
}

// Watch mocks base method
func (m *MockResourceInterface) Watch(opts v1.ListOptions) (watch.Interface, error) {
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockResourceInterfaceMockRecorder) Watch(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockResourceInterface)(nil).Watch), opts)
}

// Patch mocks base method
func (m *MockResourceInterface) Patch(name string, pt types.PatchType, data []byte) (*unstructured.Unstructured, error) {
	ret := m.ctrl.Call(m, "Patch", name, pt, data)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockResourceInterfaceMockRecorder) Patch(name, pt, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockResourceInterface)(nil).Patch), name, pt, data)
}
